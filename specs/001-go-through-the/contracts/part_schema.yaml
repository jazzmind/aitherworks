# Part Schema Definition
# This schema defines the structure for part YAML files in data/parts/

# Required fields
required:
  - part_id
  - display_name
  - category
  - description
  - ports
  - costs
  - visual

# Field definitions
fields:
  part_id:
    type: string
    pattern: "^[a-z_]+$"
    description: "Unique part identifier (lowercase with underscores)"
    example: "weight_wheel"
  
  display_name:
    type: string
    min_length: 3
    max_length: 50
    description: "Human-readable name"
    example: "Weight Wheel"
  
  category:
    type: string
    enum: ["input", "transformation", "training", "output", "visualization"]
    description: "Part category for UI organization"
  
  description:
    type: string
    min_length: 10
    max_length: 500
    description: "Steampunk-themed explanation of part function"
  
  ports:
    type: object
    min_properties: 1
    description: "Named ports with type and direction (hybrid cardinal + numbered)"
    pattern_properties:
      "^(in|out)_(north|south|east|west)(?:_[1-9][0-9]*)?$":
        type: object
        required:
          - type
          - direction
        fields:
          type:
            type: string
            enum: ["scalar", "vector", "matrix", "tensor", "attention_weights", "logits", "gradient", "signal"]
          direction:
            type: string
            enum: ["input", "output"]
    examples:
      in_north:
        type: "vector"
        direction: "input"
      out_south:
        type: "vector"
        direction: "output"
      in_north_1:
        type: "vector"
        direction: "input"
        description: "Example of numbered port for complex parts"
    notes:
      - "Simple parts (≤4 ports per direction) use cardinal names only: in_north, out_south"
      - "Complex parts (>4 ports per direction) use numbered suffix: in_north_1, in_north_2"
      - "Visual layout matches Godot GraphNode sides: north=top, south=bottom, east=right, west=left"
  
  costs:
    type: object
    required:
      - brass
      - mass
      - pressure
    fields:
      brass:
        type: integer
        minimum: 0
        maximum: 5000
        description: "Placement cost"
      mass:
        type: integer
        minimum: 0
        maximum: 10000
        description: "Parameter count contribution"
      pressure:
        type: string
        enum: ["None", "Low", "Medium", "High"]
        description: "Energy/latency contribution"
  
  behavior:
    type: object
    optional: true
    description: "Part-specific configuration"
    fields:
      default_spokes:
        type: integer
        optional: true
        description: "For Weight Wheel"
      trainable:
        type: boolean
        default: false
      # Other part-specific fields can be added
  
  visual:
    type: object
    required:
      - icon
      - scene
    fields:
      icon:
        type: string
        pattern: "^res://assets/icons/[a-z_]+\\.svg$"
        description: "Path to SVG icon"
      scene:
        type: string
        pattern: "^res://game/parts/[a-z_]+\\.tscn$"
        description: "Path to Godot scene file"

# Validation rules
validation_rules:
  - name: "unique_part_id"
    description: "Part ID must be unique across all parts"
    check: "part_id not in existing_part_ids"
  
  - name: "port_direction_consistency"
    description: "Port name prefix must match direction (in_* for input, out_* for output)"
    check: "port name starts with 'in_' ⟺ direction == 'input'"
  
  - name: "scene_exists"
    description: "Referenced scene file must exist"
    check: "file_exists(visual.scene)"
  
  - name: "icon_exists"
    description: "Referenced icon file must exist"
    check: "file_exists(visual.icon)"
  
  - name: "gradient_port_pairing"
    description: "If part has gradient ports, must have corresponding data ports"
    check: "for each gradient port, matching data port exists"

# Port type descriptions
port_types:
  scalar:
    description: "Single floating-point value"
    example_value: 0.5
  
  vector:
    description: "1D array of floats"
    example_value: [0.5, 0.3, 0.9]
  
  matrix:
    description: "2D array of floats"
    example_value: [[0.1, 0.2], [0.3, 0.4]]
  
  tensor:
    description: "3D+ array of floats (e.g., images, convolution outputs)"
    example_shape: [3, 224, 224]  # RGB image
  
  attention_weights:
    description: "Special matrix for attention visualization (uint8 compressed → float32)"
    compression: "0-255 → divide by 255"
  
  logits:
    description: "Vector with probability distribution semantics"
    constraint: "values sum to ≤1.0 after softmax"
  
  gradient:
    description: "Matches data port shape but represents derivatives"
    note: "Flows backward during training"
  
  signal:
    description: "Boolean/trigger for control flow"
    example_value: true

# Examples
examples:
  - part_id: "weight_wheel"
    display_name: "Weight Wheel"
    category: "transformation"
    description: "A brass wheel with adjustable spokes that multiply incoming signals by learned weights."
    ports:
      in_north:
        type: "vector"
        direction: "input"
      out_south:
        type: "vector"
        direction: "output"
      gradient_in:
        type: "gradient"
        direction: "input"
    costs:
      brass: 50
      mass: 100
      pressure: "Low"
    behavior:
      default_spokes: 3
      trainable: true
    visual:
      icon: "res://assets/icons/weight_wheel.svg"
      scene: "res://game/parts/weight_wheel.tscn"
  
  - part_id: "steam_source"
    display_name: "Steam Source"
    category: "input"
    description: "Provides input data as aetheric steam patterns."
    ports:
      out_south:
        type: "vector"
        direction: "output"
    costs:
      brass: 10
      mass: 0
      pressure: "None"
    behavior:
      trainable: false
    visual:
      icon: "res://assets/icons/steam_pipe.svg"
      scene: "res://game/parts/steam_source.tscn"

